# /deployment/nginx.conf
#
# This is a template Nginx configuration for your Node.js application.
# To use it on your server:
# 1. Copy this file to /etc/nginx/sites-available/your_domain.com
# 2. Replace the placeholders YOUR_DOMAIN.COM and /PATH/TO/YOUR/PROJECT.
# 3. Create a symbolic link: sudo ln -s /etc/nginx/sites-available/your_domain.com /etc/nginx/sites-enabled/
# 4. Test the configuration: sudo nginx -t
# 5. Reload Nginx: sudo systemctl reload nginx

# Upstream block: Defines a pool of servers our Node.js app is running on.
# This makes the configuration cleaner and easier to manage.
upstream node_app {
    # Your Node.js app is running on port 3000 on the same machine (localhost).
    server 127.0.0.1:3000;
    keepalive 64;
}

# Main server block for handling incoming public traffic.
server {
    # Listen on port 80 for standard HTTP traffic (for both IPv4 and IPv6).
    listen 80;
    listen [::]:80;

    # IMPORTANT: Replace these with your actual domain name(s).
    server_name YOUR_DOMAIN.COM www.YOUR_DOMAIN.COM;

    # --- Static File Serving (Performance) ---
    # This location block intercepts requests for static assets and serves them
    # directly from Nginx, which is much faster than Node.js.
    location ~* ^/(styles|js|images|documents|icons)/ {
        # IMPORTANT: Replace this with the absolute path to your project's public folder.
        root /PATH/TO/YOUR/PROJECT/public;

        # Add headers to tell browsers to cache these files for a long time.
        expires 1y;
        add_header Cache-Control "public";
    }

    # --- Reverse Proxy (Application Logic) ---
    # This is the catch-all block. Any request that wasn't for a static file
    # gets passed along ("proxied") to our Node.js application.
    location / {
        # Pass the request to the "node_app" upstream we defined earlier.
        proxy_pass http://node_app;

        # Standard headers to forward important information to your Node app.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Required for WebSocket support if you ever add it.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }
}